// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String
  categories Category[] @relation("CategoryToBillboard")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  storeId String
  store   Store  @relation("StoreToBillboard", fields: [storeId], references: [id])

  @@index([storeId])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  storeId String
  store   Store  @relation("StoreToCategory", fields: [storeId], references: [id])

  billboardId String
  billboard   Billboard @relation("CategoryToBillboard", fields: [billboardId], references: [id])

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  products  Product[] @relation("SizeToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  storeId String
  store   Store  @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id       String    @id @default(uuid())
  name     String
  value    String
  products Product[] @relation("ColorToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation("StoreToColor", fields: [storeId], references: [id])

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Float
  description String
  quantity    Int
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[]     @relation("ProductToImage")
  orderItems  OrderItem[] @relation("ProductToOrderItem")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  sizeId String
  size   Size   @relation("SizeToProduct", fields: [sizeId], references: [id])

  colorId String
  color   Color  @relation("ColorToProduct", fields: [colorId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  orderItems OrderItem[] @relation("OrderToOrderItem")
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  storeId String
  store   Store  @relation("StoreToOrder", fields: [storeId], references: [id])

  @@index([storeId])
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  subtotal  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation("OrderToOrderItem", fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation("ProductToOrderItem", fields: [productId], references: [id], onDelete: Cascade)
}
